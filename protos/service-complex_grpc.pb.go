// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: protos/service-complex.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComplexCompute_Sqrt_FullMethodName  = "/ComplexCompute/Sqrt"
	ComplexCompute_Abs_FullMethodName   = "/ComplexCompute/Abs"
	ComplexCompute_Power_FullMethodName = "/ComplexCompute/Power"
	ComplexCompute_Log_FullMethodName   = "/ComplexCompute/Log"
	ComplexCompute_Round_FullMethodName = "/ComplexCompute/Round"
)

// ComplexComputeClient is the client API for ComplexCompute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplexComputeClient interface {
	Sqrt(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	Abs(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	Power(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	Log(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	Round(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*OperationResponse, error)
}

type complexComputeClient struct {
	cc grpc.ClientConnInterface
}

func NewComplexComputeClient(cc grpc.ClientConnInterface) ComplexComputeClient {
	return &complexComputeClient{cc}
}

func (c *complexComputeClient) Sqrt(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, ComplexCompute_Sqrt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexComputeClient) Abs(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, ComplexCompute_Abs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexComputeClient) Power(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, ComplexCompute_Power_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexComputeClient) Log(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, ComplexCompute_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexComputeClient) Round(ctx context.Context, in *BinaryRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, ComplexCompute_Round_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplexComputeServer is the server API for ComplexCompute service.
// All implementations must embed UnimplementedComplexComputeServer
// for forward compatibility.
type ComplexComputeServer interface {
	Sqrt(context.Context, *UnaryRequest) (*OperationResponse, error)
	Abs(context.Context, *UnaryRequest) (*OperationResponse, error)
	Power(context.Context, *BinaryRequest) (*OperationResponse, error)
	Log(context.Context, *BinaryRequest) (*OperationResponse, error)
	Round(context.Context, *BinaryRequest) (*OperationResponse, error)
	mustEmbedUnimplementedComplexComputeServer()
}

// UnimplementedComplexComputeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplexComputeServer struct{}

func (UnimplementedComplexComputeServer) Sqrt(context.Context, *UnaryRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedComplexComputeServer) Abs(context.Context, *UnaryRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abs not implemented")
}
func (UnimplementedComplexComputeServer) Power(context.Context, *BinaryRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (UnimplementedComplexComputeServer) Log(context.Context, *BinaryRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedComplexComputeServer) Round(context.Context, *BinaryRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Round not implemented")
}
func (UnimplementedComplexComputeServer) mustEmbedUnimplementedComplexComputeServer() {}
func (UnimplementedComplexComputeServer) testEmbeddedByValue()                        {}

// UnsafeComplexComputeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplexComputeServer will
// result in compilation errors.
type UnsafeComplexComputeServer interface {
	mustEmbedUnimplementedComplexComputeServer()
}

func RegisterComplexComputeServer(s grpc.ServiceRegistrar, srv ComplexComputeServer) {
	// If the following call pancis, it indicates UnimplementedComplexComputeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComplexCompute_ServiceDesc, srv)
}

func _ComplexCompute_Sqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexComputeServer).Sqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexCompute_Sqrt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexComputeServer).Sqrt(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplexCompute_Abs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexComputeServer).Abs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexCompute_Abs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexComputeServer).Abs(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplexCompute_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexComputeServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexCompute_Power_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexComputeServer).Power(ctx, req.(*BinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplexCompute_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexComputeServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexCompute_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexComputeServer).Log(ctx, req.(*BinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplexCompute_Round_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexComputeServer).Round(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplexCompute_Round_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexComputeServer).Round(ctx, req.(*BinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplexCompute_ServiceDesc is the grpc.ServiceDesc for ComplexCompute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplexCompute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ComplexCompute",
	HandlerType: (*ComplexComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sqrt",
			Handler:    _ComplexCompute_Sqrt_Handler,
		},
		{
			MethodName: "Abs",
			Handler:    _ComplexCompute_Abs_Handler,
		},
		{
			MethodName: "Power",
			Handler:    _ComplexCompute_Power_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _ComplexCompute_Log_Handler,
		},
		{
			MethodName: "Round",
			Handler:    _ComplexCompute_Round_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service-complex.proto",
}
